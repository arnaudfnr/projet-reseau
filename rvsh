#!/bin/bash

#define _XOPEN_SOURCE
#include "genererSalt.c"
#include <unistd.h>


########################################################################################################
#			fonction interaction							       
#												       
# $1(machine)	 $2(user) $3 	(user précédent)						       
#												       
# On distingue les prompts admin et user et on les affiche dans une boucle infinie		       
# Récupération du nom de la commande et de ses arguments, vérification du type 			       
# Ajout du préfixe commande ou admin selon les cas						       
# Appel de la fonction commande en lui envoyant les arguments					       
#												       
# Dans la partie user : 									       
# La commande exit doit permettre de se reconnecter à l'utilisateur précédent (s'il y en a un)	       
# Son nom est alors stocké dans $3 (voir "su" et "connect") d'où la condition. 			      
# Une autre condition teste si le fichier msgnom_utilisateur existe. 				       
# Si c'est le cas, une discussion a été ouverte par un autre utilisateur.			       
# On récupère alors le nom et la machine de l'envoyeur renseigné dans le fichier (cf commande-write)   
# Enfin on lance la commande write avec la réponse de l'utilisateur(formée par les 3 arguments du read)
#												       
########################################################################################################

function interaction() {
	while true
	do
		if [ $2 = "admin" ]; then
			echo -e "\nrvsh > \c"
			read cmd arg1 arg2
			
			if [ "$(type -t admin-$cmd)" = "function" ]; then 
				admin-$cmd NULL $2 $arg1 $arg2
			elif [ "$(type -t commande-$cmd)" = "function" ]; then
				commande-$cmd NULL $2 $arg1 $arg2
			else
				echo "Commande non comprise !"
			fi
			
		else
			echo -e "\n$2@$1 > \c"
			read cmd arg1 arg2
			fun="commande-$cmd"	
			if [ "$(type -t $fun)" = "function" ]; then
				if [ $cmd = "exit" ]; then
					arg1=$3 
				fi
	   			$fun $1 $2 $arg1 "$arg2"

			elif [ -e msg$2 ]; then
				sender=$(cat msg$2 | cut -d @ -f 1)
				mach=$(cat msg$2 | cut -d \> -f 1 | cut -d @ -f 2)
				commande-write $1 $2 $sender@$mach "$cmd $arg1 $arg2"
			else
	  			echo "Commande non comprise !"
			fi	
		fi

	done
}


######################################################################################################
#			fonction connection
#
# $1(machine)	 $2(user)    $3 (user précédent)
# On teste si l'utilisateur a le droit de se connecter à la machine
# On teste si le mdp est celui renseigné dans le fichier users 
# Pour cela on récupère la partie derrière le 3e ; à la ligne de l'user 
# On récupère la date au format "jour mois année heure" 
# On écrit ensuite les informations dans le fichier Connexions
# Le fichier Connexions contient tous les utilisateurs actuellement connectés et sur quelle(s) machine(s)
# On va ensuite modifier le fichier usersinfos (utilisé pour la commande finger) 			
# Pour cela on récupère tous les champs sauf les deux derniers (terminal et date) qui doivent être mis à jour 
# On les stocke d'abord dans un fichier temporaire pour pouvoir supprimer l'ancienne ligne dans usersinfos avec sed
# On supprime l'ancienne ligne puis on ajoute la nouvelle dans le fichier usersinfos.
# Appel de la fonction interaction en lui envoyant machine et user (et user précédent s'il existe)
#
########################################################################################################

function connection() {
	if [ $(grep $2 users | grep -o $1) = $1 ]; then
			echo -e "Rentrez votre mot de passe : \c"
			read -s mdp
			if [ $mdp = $(grep $2 users | cut -d \; -f 3) ]; then
			
					date=$(date | cut -d \( -f 1 ) 
					echo "$2 ; $1 ; $date" >> Connexions
					sed -i "s/$2 ;\(.*\);\(.*\);.*;.*;\(.*\)/$2 ;\1;\2;pts\/$tty ;$date ;\3/" usersinfos
		
					interaction $1 $2 $3
			else
				echo -e "\nMauvais mot de passe !"
				connection $1 $2 $3
			fi				
	else 
		echo "Vous n'avez pas les droits !"
	fi 2>> erreur.log

}

######################################################################################################
#			fonction connection-admin
#
# connection en mode admin
# vérification du mdp en le comparant à celui stocké dans le fichier spécial passAdmin
# appel de la fonction interaction en lui envoyant NULL pour la machine et admin en user
#
########################################################################################################

function connection-admin(){
	echo -e "Rentrez votre mot de passe : \c"
	read -s mdp
	date=$(date | cut -d \( -f 1 )
	if [ $mdp = $(cat passAdmin) ]; then					
		interaction $1 admin $2
	else
		echo -e "\nMauvais mot de passe !"
		connection-admin $1 $2
	fi
}

######################################################################################################
#			fonction su
#
# $1 (machine) $2 (ancien user) $3 (nouvel user)
# Si le nom du nouvel utilisateur a été donné en argument, on incrémente un compteur
# On appelle ensuite la fonction connexion
# On donne le nouvel utilisateur en argument 2 mais aussi celui de l'ancien en argument 3
# On pourra alors le réutiliser lorsque le nouvel utilisateur tapera la cmd exit pour se reconnecter
#
########################################################################################################

function commande-su() {
		if [ $2 = "admin" ]; then
			echo "Sur quelle machine voulez-vous vous connecter ?"
			read mach
			while [ "$(grep $mach machines)" = ""  ]; do
				echo "La machine n'existe pas ! "
				commande-su $1 $2 $3
			done
			cpt=`expr $cpt + 1`
			interaction $mach $3 $2	
		elif [ "$(grep $3 users)" != "" ]; then
			cpt=`expr $cpt + 1`
			connection $1 $3 $2 				
		elif [ $3 = "admin" ]; then
			cpt=`expr $cpt + 1`
			connection-admin $1 admin $2		
		else
			erreur
		fi 2>> erreur.log
}

######################################################################################################
#			fonction connect
#
# $1 (ancienne machine) $2 (user) $3 (nouvelle machine)
# Fonctionne sur le même principe que la commande su.
#
########################################################################################################

function commande-connect() {
		if [ "$(grep $3 machines)" != " " ]; then
			cpt=`expr $cpt + 1`
			connection $3 $2 $1
		elif [ $2 = "admin" ] ; then
			interaction $3 $2
		else 
			erreur
		fi 2>> erreur.log
}

######################################################################################################
#			fonction passwd
#
# $1 (machine) $2 (user)
# On redemande d'abord le mdp de l'user (ou de l'admin) et on le vérifie
# Si c'est bon, on demande le nouveau mdp et sa confirmation sinon on recommence
# Enfin on modifie le fichier users avec la commande sed -i
#
########################################################################################################

function commande-passwd() {
	local pass pass2
	echo -e "\nChangement de mot de passe pour $2"
        echo -e "Mot de passe actuel : \c"
	read -s pass 
	if [ $2 = "admin" ]; then pass2=$(cat passAdmin) 
	else pass2=$(grep $2 users | cut -d \; -f 3)
	fi
	if [ $pass =  $pass2 ] ; then
		echo -e "\nNouveau mot de passe : \c"
		read -s pass
		echo -e "\nConfirmer le nouveau mot de passe : \c"
		read -s pass2
		if [ $pass = $pass2 ] ; then
			if [ $2 = "admin" ]; then sed -i 's/.*/'$pass'/' passAdmin
			else sed -i 's/'$2';\(.*\);.*/'$2';\1; '$pass'/' users
			fi
		else 
			echo "Les mots de passe sont différents !" 
			commande-passwd $1 $2
		fi
	else 
		echo "Mauvais mot de passe !"
		commande-passwd $1 $2
	fi	
}

######################################################################################################
#			fonction write
#
# $1 (machine) $2 (user) $3 (destinataire@samachine) $4 (message)
# On commence par créer deux variables locales receiver et mach à partir de l'argument 3
# Si le message est exit, on détruit le fichier msgnom_destinataire et la fonction se termine
# Sinon on commence par vérifier si le destinataire est connecté
# Si c'est le cas, on va chercher son numéro de terminal dans le fichier usersinfos
# On envoie alors un prompt spécial envoyeur@samachine suivi du message sur le terminal du destinataire
# On stocke dans le fichier msgnom_destinataire les métadonnées du message
# Ce fichier permettra au dernier de savoir qu'il a recu un message et de qui
# On pourra alors ouvrir une discussion de son côté (cf fonction interaction)
# Enfin on redemande un nouveau message et on relance la commande write
#
########################################################################################################

function commande-write() {
	local receiver=$(echo $3 | cut -d @ -f 1)
	local mach=$(echo $3 | cut -d @ -f 2)
	
	if [ "$4" = "exit" ]; then 
			rm msg$receiver
	else
		if [ $(cat Connexions | grep $receiver | grep -c $mach) -ge 1 ]; then 
			term=$(cat usersinfos | grep $receiver | cut -d \; -f 4)
			echo -e "\n$2@$1 > $4" > \/dev\/$term
			echo "$2@$1 > $receiver@$mach $(date)" >> msg$receiver
			read msg
			commande-write $1 $2 $3 "$msg"
		else 
			echo "L'utilisateur n'est pas connecté à la machine !"
		fi
	fi
}

######################################################################################################
#			fonction who
#
# $1 (machine)
# On vérifie tout d'abord que l'user est bien connecté à une machine (l'admin ne l'est pas)
# Ensuite on affiche tous les utilisateurs connectés à la machine ainsi que leur date de connexion
#
########################################################################################################

function commande-who() {
	if [ $1 = NULL ]; then
		echo "Vous n'êtes connectés à aucune machine"
	else
		cat Connexions | grep $1 | cut -n -d \; -f 1,3
	fi
}

######################################################################################################
#			fonction rusers
#
# Le fichier Connexions stocke toutes les infos nécessaires pour la commande rusers, donc on l'affiche
#
########################################################################################################

function commande-rusers() { 
	cat Connexions 
}

######################################################################################################
#			fonction rhost
#
# Le fichier machine stocke toutes les machines du réseau, donc on l'affiche
#
########################################################################################################

function commande-rhost() { 
	cat machines 
}

function commande-finger() {
	if [ $2 = "admin" ] ; then
		echo -e "Administrateur \nConnecté au terminal pts/$tty \nDate de connexion : $date"
	else
		local i=1 champ
		while read champ
		do
			echo "$champ  : $(cat usersinfos | grep $2 | cut -d \; -f $i)"
			i=`expr $i + 1` 
		done < Champs
	fi
}

#########################################################################################################
#			fonction afinger
#
# L'administrateur choisi s'il veut ajouter, supprimer ou modifier les informations d'un utilisateur
# L'utilisateur choisi ce qu'il veut modifier à l'aide de menus
#
#########################################################################################################

function admin-afinger(){
	local nom nom2
	echo -e "\nListe des utilisateurs"
	cat users | cut -d \; -f 1 
		echo -e "\nListe des informations"
			  local i=1 champ
			  while read champ
			  do
				echo "$champ"
			  done < Champs
			  echo -e "\n"
	select choix in "Ajouter des informations à un utilisateur" "Modifier des informations d'un utilisateur" "Supprimer des informations d'un utilisateur" "Ne rien faire"
	do
		case $REPLY in
			1)ask-nom
			  i=1
		 	  while read champ
			  do
				echo "$champ  : $(cat usersinfos | grep $nom | cut -d \; -f $i)"
				i=`expr $i + 1` 
			  done < Champs
			  echo "Que voulez-vous ajouter ?"
			  read ajout
			  echo $ajout >> Champs
			  echo "Quelle valeur voulez-vous donner à $ajout pour $nom ?"
			  read val
			  sed -i "s/^\([^$nom].*\)$/\1;NC /" usersinfos	       
			  sed -i "s/^\($nom.*\)$/\1;$val /" usersinfos	       
			  break;;
			2)ask-nom
			  i=1 
			  while read champ
			  do
				echo "$champ  : $(cat usersinfos | grep $nom | cut -d \; -f $i)"
			  i=`expr $i + 1` 
			  done < Champs
			  echo "Que voulez-vous modifier ?"
			  read modif
			  i=1
			  while read champ && [ "$modif" != "$champ" ]
			  do
				  i=`expr $i + 1` 
			  done < Champs
		  	if [ "$modif" = "$champ" ]; then
			  	echo "Quelle valeur voulez-vous donner à "$modif" pour $nom ?"
			  	read val
				if [ "$modif" = "Nom" ] ; then
					sed -i "s/$nom\(.*\)/$val\1/" usersinfos
				else
					supr=$(cat usersinfos | grep $nom | cut -d \; -f $i)
					sed -i "s/\($nom.*\);$supr\(.*\)/\1;$val \2/" usersinfos
				fi
			else
				echo "Aucun champ ne correspond"
				admin-afinger
			fi
			break;;	
			3)ask-nom
			  i=1 
			  while read champ
			  do
				echo "$champ  : $(cat usersinfos | grep $nom | cut -d \; -f $i)"
				i=`expr $i + 1` 
			  done < Champs
			  echo " Que voulez vous supprimer ?"
			  read modif
			  i=1
			  while read champ && [ "$modif" != "$champ" ]
			  do
				i=`expr $i + 1`
			  done < Champs
			  if [ "$modif" =  "$champ" ]; then
				sup=$(cat usersinfos | grep $nom | cut -d \; -f $i)
				sed -i "s/^\([$nom].*\)$sup\(.*\)/\1NC\2/" usersinfos
			  else
				echo "Aucun champ ne correspond"
				admin-afinger
			  fi			
			  break;;
			4)break;;
			*)echo "Choix non compris !"
			  admin-afinger;;
		esac
	done
}

function admin-host(){
	echo "liste des machines du réseau"
	cat machines
	echo -e "\n"
	select choix in "Ajouter une machine" "Supprimer une machine" "Ne rien faire"
	do
		case $REPLY in
			1) echo "Entrer le nom de la machine à ajouter"
			   read nom
			   echo "$nom" >> machines
			   break;;
			2) echo "Entrer le nom de la machine à supprimer"
			   read nom
			   sed -i "/$nom/d" machines
			   break;;
			3) break;;
			*) echo "Choix non compris !";;
		esac
	done
}

function admin-users(){
	local mdp mdp2
	echo -e "\nListe des utilisateurs"
	cat users | cut -d \; -f 1 
	echo -e "\n"
	select choix in "Ajouter un utilisateur" "Supprimer un utilisateur" "Modifier les droits d'un utilisateur" "Modifier le mot de passe d'un utilisateur" "Ne rien faire"
	do
		case $REPLY in
			1) echo -e "\nEntrer le nom du nouvel utilisateur : \c"
			   read nom
			   while [ $mdp != $mdp2 ]
			   do
				echo -e "Entrer le mot de passe du nouvel utilisateur : \c"
				read -s mdp
				echo -e "\nConfirmer le mot de passe : \c"
				read -s mdp2
				if [ $mdp != $mdp2 ] ; then 
					echo -e "\nLes mots de passe sont différents !" 
				fi
			   done   
		           echo "Entrer la liste des machines auxquelles l'utilisateur peut se connecter en les séparant par un espace"
			   read machine
		           echo "$nom; $machine ; $mdp" >> users
			   echo "$nom;" >> usersinfos
		           break;;

			2) ask-nom
			   sed -i "/$nom/d" users
			   sed -i "/$nom/d" usersinfos
			   break;;

			3) ask-nom
			   echo -e "\nliste des machines de $nom :"
			   echo -e "$(cat users | grep $nom | cut -d \; -f 2)\n"
				
			   select choix in "Retirer des droits" "Ajouter des droits" "Ne rien faire"
			   do
				   case $REPLY in
					1) echo -e "\nRentrer le nom des machines à retirer à $nom en les séparant par un espace"
					   read machines
					   i=1
					   while [ $i -le $(echo $machines | wc -w) ] 
					   do
						mach=$(echo $machines | cut -d ' ' -f $i)
						cat users | grep $nom | sed -i "s/$nom;\(.*\)$mach \(.*\)/$nom;\1\2/" users
						i=`expr $i + 1`
					   done
					   break;;
						
					2) echo -e "\nRentrer le nom des machines à ajouter à $nom en les séparant par un espace"
					   read machines
					   droit=$(echo -e "$(cat users | grep $nom | cut -d \; -f 2)$machines\c")
					   sed -i "s/$nom;.*;\(.*\)/$nom;$droit;\1/" users
					   break;;

					3) break;;
					*) echo "Choix incorrect";;
				   esac
			   done
			   break;;

			4) ask-nom
			   echo -e "\nChoisir un nouveau mot de passe"
			   read mdp
			   sed -i "s/$nom;\(.*\);.*/$nom;\1; $mdp/" users
			   break;;

			5) break;;
			*) echo "Choix non compris !";;

		esac
	done
}

function ask-nom() {
	echo -e "\nEntrer le nom d'utilisateur : \c"
	read nom
	while [ "$nom" != "$(grep $nom users | cut -d \; -f 1)" ] ; do
		echo "L'utilisateur n'existe pas !"
		ask-nom
	done

}
	
function erreur() { 
	echo "Il y a une erreur. Veuillez recommencer." 
}

function commande-exit() {
	if [ $cpt -ge 1 ]; then
		cpt=`expr $cpt - 1`
		sed -i "/$2.*$1.*/d" Connexions
		break
	elif [ $cpt -eq 0 ]; then
		sed -i "/$2.*$1.*/d" Connexions
		rm erreur.log
		exit 0
	else 
		erreur
	fi 2> erreur.log
}	

# récupération du numéro de terminal (pts/n)
tty=$(tty | cut -d \/ -f 4)
cpt=0
PS3="Votre choix ? "

if [ $# -ge 1 ]; then
	case $1 in
	
	-connect) if [ $# -eq 3	]; then # test pour savoir si l'user a bien envoyé tous les args
			  connection $2 $3 	# $2(machine)	$3(user)
		  else
			erreur
		  fi;;
	-admin) connection-admin NULL ;;
	*) erreur;;
	esac
else 
	erreur
fi
