#! /bin/bash

#include <unistd.h>

#######################################################################################################
#			fonction interaction
# $1(machine)	 $2(user)
# tq vrai affichage du prompt user@machine
# récupération du nom de la commande et de ses arguments 
# appel de la fonction commande en lui envoyant les arguments
#
########################################################################################################

function interaction() {
	while true
	do
		if [ $1 = "admin" ]; then
			echo -e "rvsh > \c"
			read cmd arg1 arg2
			if [ $cmd = "who" ]; then
				echo "Vous n'êtes connectés à aucune machine"
			else
				fun="commande-$cmd"
				if [ "$(type -t $fun)" = "function" ]; then
					$fun NULL $1 $arg1 $arg2
				else
					echo "Commande non comprise"
				fi
			fi

		else
			echo -e "$2@$1 > \c"
			read cmd arg1 arg2
			fun="commande-$cmd"	
			if [ "$(type -t $fun)" = "function" ]; then
				if [ $cmd = "exit" ] ; then
					arg1=$3
				fi
	   			$fun $1 $2 $arg1 $arg2
			else
	  			echo "Commande non comprise !"
			fi	
		fi

	done
}



######################################################################################################
#			fonction connection
#
# $1(machine)	 $2(user)
# on test si l'utilisateur a le droit de se connecter à la machine
# on test si le mdp est le bon
# on récupère la partie derrière le 3eme ; (cut -d \; -f 3) à la ligne de l'user dans le fichier user
# on récupère le tty et on écrit les informations dans le fichier Connexions
# appel de la fonction interaction en lui envoyant machine et user
#
########################################################################################################

function connection() {
	if test $(grep $2 users | grep -o $1) = $1
		then
			echo -e "Rentrez votre mot de passe : \c"
			read mdp

			if test $mdp = $(grep $2 users | cut -d \; -f 3)
				then
					tty=$(ps -l | grep "ps" | sed -u 's/.*pts\/\([0-9][0-9]*\).*/\1/')
					echo "$2 ; $1 ; $date ; terminal pts/$tty" >> Connexions
					
					interaction $1 $2 $3
			else
				echo "Mauvais mot de passe !"
			fi
					
	else 
		echo "Vous n'avez pas les droits !"
	fi

}

function connection-admin(){
	echo -e "Rentrez votre mot de passe : \c"
	read mdp

	if test $mdp = $(grep "admin" users | cut -d \; -f 3)
	then
		tty=$(ps -l | grep "ps" | sed -u 's/.*pts\/\([0-9][0-9]*\).*/\1/')
		echo "admin ; $date ; terminal pts/$tty" >> Connexions
					
		interaction admin
	else
		echo "Mauvais mot de passe !"
	fi
}


function commande-su() {
	if [ -n $3 ] ; then
		cpt=`expr $cpt + 1`
		connection $1 $3 $2 #on donne en argument le nom de la machine, le nom du nouvel utilisateur ainsi que le nom de 			l'utilisateur précédent.
	else 
		erreur
	fi
}

function commande-connect() {
	if [ -n $3 ] ; then
		cpt=`expr $cpt + 1`
		connection $3 $2 $1
	else 
		erreur
	fi
}

function commande-passwd() {

	echo "Changement de mot de passe pour $2"
        echo -e "Mot de passe actuel : \c"
	read pass
	if test $pass = $(grep $2 users | cut -d \; -f 3) ; then
		echo -e "Nouveau mot de passe : \c"
		read pass
		echo -e "Retaper le nouveau mot de passe : \c"
		read pass2
		if test $pass = $pass2 ; then
			sed -i 's/'$2' ;\(.*\);.*/'$2' ;\1; '$pass'/' users
		else 
			echo "Les mots de passe sont différents !" 
			commande-passwd $1 $2 $3
		fi
	else 
		echo "Mauvais mot de passe !"
		commande-passwd $1 $2 $3
	fi
			
}

function commande-write() {
	receiver=$(echo $3 | cut -d @ -f 1)
	mach=$(echo $3 | cut -d @ -f 2)
	if  test $(cat Connexions | grep $receiver | grep -c $mach) -ge 1 ; then 
		if test $4 = "exit" ; then 
			echo ""
		else
			term=$(cat Connexions | grep $receiver | grep $mach | cut -d \; -f 4 | cut -d \/ -f 2)
			echo "" > \/dev\/pts\/$term
			echo "$2@$1 > $4" > \/dev\/pts\/$term
			echo -e "$receiver@$mach > \c" > \/dev\/pts\/$term
			read msg
			commande-write $1 $2 $3 $msg
		fi
	else 
		erreur
	
	fi
	
}

function commande-who() {
	cat Connexions | grep $1 | cut -n -d \; -f 1,3
}

function commande-rusers() {
	cat Connexions
}

function commande-rhost() {
	cat machines
}

function commande-finger() {
	cat userinfos
}

function erreur() {
	echo "Il y a une erreur. Veuillez recommencer."
}

function commande-exit() {
	if [ $cpt -ge 1 ] ; then
		cpt=`expr $cpt - 1`
		fichCo $1 $2
		break
	elif [ $cpt -eq 0 ] ; then
		fichCo $1 $2
		exit 0
	else 
		erreur
	fi
}	

function fichCo() {
	mv Connexions Connexionstmp
	cat Connexionstmp | grep -v ".*$2.*$1.*" > Connexions
	rm Connexionstmp
}

function commande-host(){
	if [ $2 = "admin" ]; then
		echo "liste des machines du réseau"
		cat machines
		echo -e "\n1 - Ajouter une machine"
       		echo "2 - Supprimer une machine"
		read choix
		case $choix in
			1) echo "Entrer le nom de la machine à ajouter"
			read nom
			echo "$nom" >> machines;;
			2) echo "Entrer le nom de la machine à supprimer"
			read nom
			sed -i "/$nom/d" machines
		esac
	else
		echo "Vous n'avez pas l'autorisation d'accéder à la liste des machines du réseau"
	fi
}

function commande-users(){
	if [ $2 = "admin" ]; then
		echo -e "\n1 - Ajouter un utilisateur"
		echo "2 - Supprimer un utilisateur"
		echo "3 - Modifier les droits d'un utilisateur"
		echo "4 - modifier le mot de passe d'un utilisateur"
		read choix
		case $choix in
			1) echo -e "\nEntrer le nom du nouvel utilisateur"
				read nom
				echo "Entrer le mot de passe du nouvel utilisateur"
				read mdp
				echo "Entrer la liste des machines auxquelles l'utilisateur peut se connecter en les séparant d'une virgule"
				read machine
				echo -e "$nom\t; $machine ; $mdp" >> users;;
			2)echo -e "\nListe des utilisateurs"
				cat users | cut -d \; -f 1 
				echo -e "\nEntrer le nom de l'utilisateur à supprimer"
				read nom
				sed -i "/$nom.*/d" users;;
			3)echo -e "\nListe des utilisateurs"
				cat users | cut -d \; -f 1 
			       	echo -e "\nEntrer le nom de l'utilisateur"
				read nom
				echo -e "\n1 - Retirer des droits"
				echo "2 - Ajouter des droits"
				read choix2
				if [ $choix2 -eq 1 ]; then
					echo -e "\nliste des machines de $nom :"
					cat users | grep $nom | cut -d \; -f 2
					echo -e "\nRentrer le nom des machines à retirer à $nom"
					read machine
					# chercher comment supprimer seulement la machine
					# cat users | grep $nom | sed "s/$machine//" > userstmp
				
				elif [ $choix2 -eq 2 ]; then
					echo -e "\nliste des machines de $nom :"
					cat users | grep $nom | cut -d \; -f 2
					echo -e "\nRentrer le nom des machines à ajouter à $nom"
					read machine	
				else
					echo "Choix incorrect"	
				fi;;

			4)echo -e "\nListe des utilisateurs"
				cat users | cut -d \; -f 1 
				echo -e "\nEntrer le nom d'utilisateur"
				read nom
				echo -e "\nChoisir un nouveau mot de passe"
				read mdp;;
		esac

	else
		echo "Vous n'avez pas l'autorisation d'accéder à cette commande"
	fi
}



# récupération de la date au format "jour num_jour mois année
date=$(date | cut -d \( -f 1 )

cpt=0

if test $# -ge 1
then
	case $1 in
	
	-connect) if test $# -ge 3	# test pour savoir si l'user a bien envoyé tous les args
		  then
			  connection $2 $3 	# $2(machine)	$3(user)
		  else
			erreur
		  fi;;
	-admin) connection-admin;;
	*) erreur;;
	esac
else 
	erreur
fi


