#! /bin/bash

#include <unistd.h>

#######################################################################################################
#			fonction interaction
# $1(machine)	 $2(user)
# tq vrai affichage du prompt user@machine
# récupération du nom de la commande et de ses arguments 
# appel de la fonction commande en lui envoyant les arguments
#
########################################################################################################

function interaction() {
	while true
	do
		if [ $2 = "admin" ]; then
			echo -e "\nrvsh > \c"
			read cmd arg1 arg2
			if [ "$(type -t admin-$cmd)" = "function" ]; then
				admin-$cmd NULL $2 $arg1 $arg2
			elif [ "$(type -t commande-$cmd)" = "function" ]; then
				commande-$cmd NULL $2 $arg1 $arg2
			else
				echo "Commande non comprise !"
			fi
			
		else
			echo -e "\n$2@$1 > \c"
			read cmd arg1 arg2
			fun="commande-$cmd"	
			if [ "$(type -t $fun)" = "function" ]; then
				if [ $cmd = "exit" ]; then
					arg1=$3
				fi
	   			$fun $1 $2 $arg1 $arg2
			else
	  			echo "Commande non comprise !"
			fi	
		fi

	done
}



######################################################################################################
#			fonction connection
#
# $1(machine)	 $2(user)
# on test si l'utilisateur a le droit de se connecter à la machine
# on test si le mdp est le bon
# on récupère la partie derrière le 3eme ; (cut -d \; -f 3) à la ligne de l'user dans le fichier user
# on récupère le tty et on écrit les informations dans le fichier Connexions
# appel de la fonction interaction en lui envoyant machine et user
#
########################################################################################################

function connection() {
	if test $(grep $2 users | grep -o $1) = $1
		then
			echo -e "Rentrez votre mot de passe : \c"
			read -s mdp

			if [ $mdp = $(grep $2 users | cut -d \; -f 3) ]; then

					date=$(date | cut -d \( -f 1 ) # récupération de la date au format "jour num_jour mois année

					echo "$2 ; $1 ; $date" >> Connexions
					touch tmp
					echo -e "$(cat usersinfos | grep  $2 | cut -d \; -f 1-3)\c" > tmp
					echo ";$tty ;$date" >> tmp
					mv usersinfos infostmp
					cat infostmp | grep -v $2 > usersinfos
					cat tmp >> usersinfos
					rm tmp	
					rm infostmp
		
					interaction $1 $2 $3
			else
				echo -e "\nMauvais mot de passe !"
				connection $1 $2 $3
			fi
					
	else 
		echo "Vous n'avez pas les droits !"
	fi

}

function connection-admin(){
	echo -e "Rentrez votre mot de passe : \c"
	read -s mdp

	if [ $mdp = $(cat passAdmin) ]; then					
		interaction NULL admin
	else
		echo "\nMauvais mot de passe !"
		connection-admin
	fi
}


function commande-su() {
	if [ -n $3 ]; then
		cpt=`expr $cpt + 1`
		connection $1 $3 $2 #on donne en argument le nom de la machine, le nom du nouvel utilisateur ainsi que le nom de 			l'utilisateur précédent.	
	else 
		erreur
	fi
}

function commande-connect() {
	if [ -n $3 ]; then
		cpt=`expr $cpt + 1`
		connection $3 $2 $1
	else 
		erreur
	fi
}

function commande-passwd() {
	local pass pass2
	echo "\nChangement de mot de passe pour $2"
        echo -e "Mot de passe actuel : \c"
	read -s pass
	if [ $2 = "admin" ]; then pass2=$(cat passAdmin) 
	else pass2=$(grep $2 users | cut -d \; -f 3)
	fi
	if [ $pass =  $pass2 ] ; then
		echo -e "\nNouveau mot de passe : \c"
		read -s pass
		echo -e "\nRetaper le nouveau mot de passe : \c"
		read -s pass2
		if [ $pass = $pass2 ] ; then
			sed -i 's/'$2';\(.*\);.*/'$2';\1; '$pass'/' users
		else 
			echo "Les mots de passe sont différents !" 
			commande-passwd $1 $2 $3
		fi
	else 
		echo "Mauvais mot de passe !"
		commande-passwd $1 $2 $3
	fi	
}

function commande-write() {
	local receiver=$(echo $3 | cut -d @ -f 1)
	local mach=$(echo $3 | cut -d @ -f 2)
	if [ $(cat Connexions | grep $receiver | grep -c $mach) -ge 1 ]; then 
		if [ $4 = "exit" ]; then 
			echo ""
		else
			term=$(cat usersinfos | grep $receiver | cut -d \; -f 4)
			echo "" > \/dev\/pts\/$term
			echo "$2@$1 > $4" > \/dev\/pts\/$term
			echo -e "$receiver@$mach > \c" > \/dev\/pts\/$term
			read msg
			commande-write $1 $2 $3 $msg
		fi
	else 
		erreur
	
	fi
	
}

function commande-who() {
	if [ $1 = NULL ]; then
		echo "Vous n'êtes connectés à aucune machine"
	else
		cat Connexions | grep $1 | cut -n -d \; -f 1,3
	fi
}

function commande-rusers() { 
	cat Connexions 
}

function commande-rhost() { 
	cat machines 
}

function commande-finger() {
	#fich="NULL"
	#if [ $2 = "admin" ] ; then
	#	echo "Quels informations afficher ?"
	#	PS3="Votre choix : "
	#	select choix in "Tous les utiliateurs" "Les utilisateurs connectés";
	#	do
	#		case $REPLY in 
	#		1) 	fich="users"
	#			break;;
	#		2) 	fich="Connexions"
	#			break;;
	#		*) 	echo "Chox non compris";;
	#		esac
	#	done
	#		
	#	while read user
	#	do
	#		i=1
	#		user=$(echo $user | cut -d \; -f 1)
	#		while read champ
	#		do
	#			echo "$champ  : $(cat usersinfos | grep $user | cut -d \; -f $i)" 
	#			i=`expr $i + 1` 
	#		done < Champs
	#	done < $fich
	#else
	if [ $2 = "admin" ] ; then
		echo -e "Administrateur \n Connecté au terminal pts/$tty \nDate de connexion : $date"
	else
		local i=1 champ
		while read champ
		do
			echo "$champ  : $(cat usersinfos | grep $2 | cut -d \; -f $i)"
			i=`expr $i + 1` 
		done < Champs
	fi
}

function admin-host(){
	echo "liste des machines du réseau"
	cat machines
	select choix in "Ajouter une machine" "Supprimer une machine" "Ne rien faire"
	do
		case $REPLY in
			1) echo "Entrer le nom de la machine à ajouter"
			   read nom
			   echo "$nom" >> machines
			   break;;
			2) echo "Entrer le nom de la machine à supprimer"
			   read nom
			   sed -i "/$nom/d" machines
			   break;;
			3) break;;
			*) echo "Choix non compris !";;
		esac
	done
}

function admin-users(){
	local mdp mdp2
	echo -e "\nListe des utilisateurs"
	cat users | cut -d \; -f 1 
	select choix in "Ajouter un utilisateur" "Supprimer un utilisateur" "Modifier les droits d'un utilisateur" "Modifier le mot de passe d'un utilisateur" "Ne rien faire"
	do
		case $REPLY in
			1) echo -e "\nEntrer le nom du nouvel utilisateur : \c"
			   read nom
			   while [ $mdp != $mdp2 ]
			   do
				echo -e "Entrer le mot de passe du nouvel utilisateur : \c"
				read -s mdp
				echo -e "Confirmer le mot de passe : \c"
				read -s mdp2
				if [ $mdp != $mdp2 ] ; then 
					echo "Les mots de passe sont différents !" 
				fi
			   done   
		           echo "Entrer la liste des machines auxquelles l'utilisateur peut se connecter en les séparant par un espace"
			   read machine
		           echo "$nom; $machine ; $mdp" >> users
			   echo "$nom;" >>usersinfos
		           break;;

			2) echo -e "\nEntrer le nom de l'utilisateur à supprimer : \c"
			   read nom
			   sed -i "/$nom/d" users
			   sed -i "/$nom.d" usersinfos
			   break;;

			3) echo -e "\nEntrer le nom de l'utilisateur : \c"
		    	   read nom
			   echo -e "\nliste des machines de $nom :"
			   echo -e "$(cat users | grep $nom | cut -d \; -f 2)\n"
				
			   select choix in "Retirer des droits" "Ajouter des droits" "Ne rien faire"
			   do
				   case $REPLY in
					1) echo -e "\nRentrer le nom des machines à retirer à $nom en les séparant par un espace"
					   read machines
					   i=1
					   while [ $i -le $(echo $machines | wc -w) ] 
					   do
						mach=$(echo $machines | cut -d ' ' -f $i)
						sed -i "s/$nom;\(.*\)$mach \(.*\)/$nom;\1\2/" users
						i=`expr $i + 1`
					   done
					   break;;
						
					2) echo -e "\nRentrer le nom des machines à ajouter à $nom en les séparant par un espace"
					   read machines
					   droit=$(echo -e "$(cat users | grep $nom | cut -d \; -f 2)$machines\c")
					   sed -i "s/$nom;.*;\(.*\)/$nom;$droit;\1/" users
					   break;;

					3) break;;
					*) echo "Choix incorrect";;
				   esac
			   done
			   break;;

			4) echo -e "\nEntrer le nom d'utilisateur"
			   read nom
			   echo -e "\nChoisir un nouveau mot de passe"
			   read mdp
			   sed -i "s/$nom;\(.*\);.*/$nom;\1; $mdp/" users
			   break;;

			5) break;;
			*) echo "Choix non compris !";;

		esac
	done
}

function erreur() { 
	echo "Il y a une erreur. Veuillez recommencer." 
}

function commande-exit() {
	if [ $cpt -ge 1 ] ; then
		cpt=`expr $cpt - 1`
		fichCo $1 $2
		break
	elif [ $cpt -eq 0 ] ; then
		fichCo $1 $2
		exit 0
	else 
		erreur
	fi
}	

function fichCo() {
	mv Connexions Connexionstmp
	cat Connexionstmp | grep -v ".*$2.*$1.*" > Connexions
	rm Connexionstmp
}

# récupération du numéro de terminal (pts/n)
tty=$(tty | cut -d \/ -f 3,4)
cpt=0
PS3="Votre choix ? "

if test $# -ge 1
then
	case $1 in
	
	-connect) if test $# -ge 3	# test pour savoir si l'user a bien envoyé tous les args
		  then
			  connection $2 $3 	# $2(machine)	$3(user)
		  else
			erreur
		  fi;;
	-admin) connection-admin;;
	*) erreur;;
	esac
else 
	erreur
fi
