#! /bin/bash

#include <unistd.h>

cpt=0


#######################################################################################################
#			fonction interaction
# $1(machine)	 $2(user)
# tq vrai affichage du prompt user@machine
# récupération du nom de la commande et de ses arguments 
# appel de la fonction commande en lui envoyant les arguments
#
########################################################################################################

function interaction() {
	while true
	do
		echo -e "$2@$1 > \c"
		read cmd arg1 arg2
		fun="commande-$cmd"	
		if [ "$(type -t $fun)" = "function" ]; then
	   		$fun $1 $2 $arg1 $arg2
		else
	  		echo "Commande non comprise !"
		fi	
	done
}



######################################################################################################
#			fonction connection
#
# $1(machine)	 $2(user)
# on test si l'utilisateur a le droit de se connecter à la machine
# on test si le mdp est le bon
# on récupère la partie derrière le 3eme ; (cut -d \; -f 3) à la ligne de l'user dans le fichier user
# on récupère le tty et on écrit les informations dans le fichier Connexions
# appel de la fonction interaction en lui envoyant machine et user
#
########################################################################################################

function connection() {

	if test $(grep $2 users | grep -o $1) = $1
		then
			echo -e "Rentrez votre mot de passe : \c"
			read mdp

			if test $mdp = $(grep $2 users | cut -d \; -f 3)
				then
					tty=$(ps -l | grep "ps" | sed -u 's/.*pts\/\([0-9][0-9]*\).*/\1/')
					echo "$2 ; $1 ; $date ; terminal pts/$tty" >> Connexions
					
					interaction $1 $2
			else
				echo "Mauvais mot de passe !"
			fi
					
	else 
		echo "Vous n'avez pas les droits !"
	fi

}

function commande-su() {
	if test -n $3; then
			#expr($cpt=$cpt+1)
			fichCo $1 $2
			connection $1 $3 
		else 
			erreur
		fi

}

function commande-passwd() {

	echo "Changement de mot de passe pour $2"
        echo -e "Mot de passe actuel : \c"
	read pass
	if test $pass = $(grep $2 users | cut -d \; -f 3) ; then
		echo -e "Nouveau mot de passe : \c"
		read pass
		echo -e "Retaper le nouveau mot de passe : \c"
		read pass2
		if test $pass = $pass2 ; then
			mv users userstmp
			sed -u 's/'$2' ;\(.*\);.*/'$2' ;\1; '$pass'/' userstmp > users
			rm userstmp
		else 
			echo "Les mots de passe sont différents !" 
			commande-passwd $1 $2 $3
		fi
	else 
		echo "Mauvais mot de passe !"
		commande-passwd $1 $2 $3
	fi
			
}

function commande-write() {
	receiver=$(echo $3 | cut -d @ -f 1)
	mach=$(echo $3 | cut -d @ -f 2)
	if  test $(cat Connexions | grep $receiver | grep -c $mach) -ge 1 ; then 
		if test $4 = "exit" ; then 
			echo ""
		else
			term=$(cat Connexions | grep $receiver | grep $mach | cut -d \; -f 4 | cut -d \/ -f 2)
			echo "" > \/dev\/pts\/$term
			echo "$2@$1 > $4" > \/dev\/pts\/$term
			echo -e "$receiver@$mach > \c" > \/dev\/pts\/$term
			read msg
			commande-write $1 $2 $3 $msg
		fi
	else 
		erreur
	
	fi
	
}

function commande-connect() {
	if test -n $3; then
		fichCo $1 $2
		connection $3 $2
	else 
		erreur
	fi
}

function commande-who() {
	cat Connexions | grep $1 | cut -n -d \; -f 1,3
}

function commande-rusers() {
	cat Connexions
}

function commande-rhost() {
	cat machines
}

function commande-finger() {
	cat userinfos
}

function erreur() {
	echo "Il y a une erreur. Veuillez recommencer."
}

function commande-exit() {
	fichCo $1 $2
	exit 0
}	

function fichCo() {
	mv Connexions Connexionstmp
	cat Connexionstmp | grep -v $2 | grep -v $1 > Connexions
	rm Connexionstmp
}

# récupération de la date au format "jour num_jour moi année
date=$(date | cut -d \( -f 1 )

if test $# -ge 1
then
	case $1 in
	
	-connect) if test $# -ge 3	#test pour savoir si l'user a bien envoyé tous les args
		  then
			  connection $2 $3 	# $2(machine)	$3(user)
		  else
			erreur
		  fi;;
	-admin) ;;
	*) erreur;;
	esac
else 
	erreur
fi


